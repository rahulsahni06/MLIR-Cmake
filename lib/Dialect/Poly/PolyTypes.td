#ifndef LIB_DIALECT_POLY_POLYTYPES_TD_
#define LIB_DIALECT_POLY_POLYTYPES_TD_

include "PolyDialect.td"
include "mlir/IR/AttrTypeBase.td"

// A base class for all types in this dialect
// Base class for toy dialect operations. This operation inherits from the base
// `TypeDef` class in AttrTypeBase.td, and provides:
//   * The parent dialect of the operation.
//   * The mnemonic for the operation, or the name without the dialect prefix.
//
//   name: related to the typeâ€™s eventual C++ class name
//   mnemonic: determines the name of the type in the textual representation of the IR.
class Poly_Type<string name, string typeMnemonic> : TypeDef<Poly_Dialect, name> {
  let mnemonic = typeMnemonic;
}

// Generate class will be named PolynomialType, it is generated by adding Type to the "Polynomial" template argument 
// we passed in the tablegen file. The name of the def itself is used to refer to the class elsewhere in tablegen files, 
// and the two can be different.
def Polynomial : Poly_Type<"Polynomial", "poly"> {
  let summary = "A polynomial with u32 coefficients";

  let description = [{
    A type for polynomials with integer coefficients in a single-variable polynomial ring.
  }];
}

#endif  // LIB_DIALECT_POLY_POLYTYPES_TD_